#!/usr/bin/env bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AMU_VERSION="0.1"

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" 

LIBDIR="$BASEDIR/../lib/amu"


# a very poor man's vendoring:
function check_options() {
    local varlist=$1

    local varsnotset="F"

    for v in $varlist; do
        if [ -z "${!v}" ]; then
            >&2 echo "ERROR: apigeetool: Required option/variable: $v is not provided."
            varsnotset="T"
        fi
    done

    if [ "$varsnotset" = "T" ]; then
        >&2 echo ""
        >&2 echo "ABEND. Please set up required opions."
        return 1
    fi
}

function check_commands() {
    local comlist=$1

    local comsnotset="F"

    for c in $comlist; do
        if ! [ -x "$(command -v $c)" ]; then
            >&2 echo "ERROR: Required command is not on your PATH: $c."
            comsnotset="T"
        fi
    done

    if [ "$comsnotset" = "T" ]; then
        >&2 echo ""
        >&2 echo "ABEND. Please make sure required commands are set and accesible via PATH."
        return 1
    fi
}

function check_cqlsh() {
    check_options "HYBRID_VERSION"

    if kubectl get pods -n apigee cqlsh &> /dev/null; then
        if [ "$(kubectl get pods -n apigee cqlsh -o jsonpath='{.status.phase}')" = 'Running' ]; then
            return
        else
            kubectl delete pods -n apigee cqlsh
        fi
    fi

# create cqlsh container
cat <<EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  labels:
  name: cqlsh
  namespace: apigee
spec:
  containers:
  - name: cqlsh
    image: "gcr.io/apigee-release/hybrid/apigee-hybrid-cassandra-client:$HYBRID_VERSION"
    imagePullPolicy: Always
    command:
    - sleep
    - "3600"
    env:
    - name: APIGEE_DML_USER
      valueFrom:
        secretKeyRef:
          key: dml.user
          name: apigee-datastore-default-creds
    - name: APIGEE_DML_PASSWORD
      valueFrom:
        secretKeyRef:
          key: dml.password
          name: apigee-datastore-default-creds
    volumeMounts:
    - mountPath: /opt/apigee/ssl
      name: tls-volume
      readOnly: true
  volumes:
  - name: tls-volume
    secret:
      defaultMode: 420
      secretName: apigee-cassandra-default-tls
  restartPolicy: Never
EOF

kubectl wait --for=condition=ready -n apigee pod/cqlsh
}

function run_cqlsh() {

    check_cqlsh
    
    kubectl -it exec -n apigee cqlsh -- bash -c "$CQLSH"
}

function exec_cqlsh() {
    local CQL=$1

    check_cqlsh
    
    # kubectl exec -n apigee cqlsh -- bash -c "$CQLSH"
    kubectl exec -n apigee cqlsh -- bash -c "$CQLSH -e \"$CQL\""
}



set -e


# options/variables

pps=""

# options
while(($#)); do
case "$1" in
    -o|--org|--organization)
    ORG="$2"

    shift 2;;

  -e|--env|--environment)
    ENV="$2"

    shift 2;;

  # management API 
  --cass-ip)
    CASS_IP="$2"

    shift 2;;

  --src)
    SRC="$2"

    shift 2;;

  --tgt)
    TGT="$2"

    shift 2;;


  # vault file path and name
  --vault)
    VAULT="$2"

    shift 2;;

  # vault file path and name
  --storepass)
    STOREPASS="$2"

    shift 2;;

  # api -- used across operations;
  --api)
    api="$2"

    shift 2;;

  # directories are used across objects
  --emigrate-dir)
    EMIGRATE_DIR="$2"

    shift 2;;

  --export-dir)
    EXPORT_DIR="$2"

    shift 2;;

  --kek)
    KEK="$2"

    shift 2;;

  # hybrid version for cassandra client
  --hybrid-version)
    HYBRID_VERSION="$2"

    shift 2;;


  --version)
    version=true
    shift 1;;

  *)
    pps="$pps $1"
    shift;;
esac
done
eval set -- "$pps"

if [ ! -z "$version" ];then
    echo "amu: 4G/5G; version: $AMU_VERSION"
    exit 0
fi

export OBJECT=$1
export ACTION=$2

# defaults
CASS_CLI=/opt/apigee/apigee-cassandra/bin/cassandra-cli
CQLSH='cqlsh apigee-cassandra-default.apigee.svc.cluster.local --ssl -u $APIGEE_DML_USER -p $APIGEE_DML_PASSWORD'

# emigrate an org, 4.50, 4.51
# 






if [ "$OBJECT" = "organizations" ]; then
    # amu org list

    check_options "ORG"

    if [ "$ACTION" = "list" ]; then
        if [ "$SRC" = "opdk" ]; then
            check_options "CASS_IP"
            check_commands "$CQLSH"

            $CQLSH $CASS_IP -e "select key from kms.organizations;"

        elif [ "$SRC" = "hybrid" ]; then

            CQL="copy rtc_${ORG//-/_}_hybrid.contract_ref(org,env) to stdout;"

            exec_cqlsh "$CQL"
        else
            echo "ERROR: organizations list: unknown src: $SRC"
        fi
    else
        echo "ERROR: Unknown action: $ACTION"
    fi


elif [ "$OBJECT" = "kek" ]; then

    check_options "SRC"

    if [ "$ACTION" = "export" ]; then

        if [ "$SRC" = "opdk" ]; then
            check_options "VAULT STOREPASS"

            KEK=$(cd $LIBDIR; java JKSExtractSKE $VAULT datastore-alias $STOREPASS $STOREPASS)
            echo "$KEK"
        elif [ "$SRC" = "hybrid" ]; then
            # hybrid
            check_options "ENV"

            secret="$(ahr-runtime-ctl org-env-sha $ORG "$ENV")-encryption-keys"
            echo "$(kubectl -n apigee get secrets $secret --output 'jsonpath={.data.envKvmEncryptionKey}'|base64 -d|base64 -d |xxd -ps)"
        else
            echo "ERROR: kvms emigrate: unknown src: $SRC"
        fi
    fi

elif [ "$OBJECT" = "kvms" ]; then
    # amu kvm export 
    # amu kvm import 

    check_options "ORG SRC"

    if [ "$ACTION" = "emigrate" ]; then
        check_options "EMIGRATE_DIR"

        # at a cassandra node's VM:

        if [ "$SRC" = "opdk" ]; then
            check_options "CASS_IP"
            check_commands "$CASS_CLI"

            echo -e "use keyvaluemap;\nget keyvaluemaps_r21[${ORG}];" | $CASS_CLI -h $CASS_IP > $EMIGRATE_DIR/$ORG-kvms.out
        elif [ "$SRC" = "hybrid" ]; then
            # hybrid
            check_commands "kubectl"

            CQL="PAGING OFF; select * from kvm_${ORG//-/_}_hybrid.kvm_map_entry where tid = '${ORG}' allow filtering;"

            exec_cqlsh "$CQL" > $EMIGRATE_DIR/$ORG-kvms.out
        else
            echo "ERROR: kvms emigrate: unknown src: $SRC"
        fi

    elif [ "$ACTION" = "export" ]; then
        check_options "EMIGRATE_DIR EXPORT_DIR TGT"
        check_commands "jq"

        if [ "$SRC" = "opdk" ]; then
            check_options "KEK"

            # amu kvm emigrate --cass-ip=10.128.0.22 --org=org --kek=9944 --emigrate-dir=. --apigee-product=opdk [hybrid] --apigee-version=4.51 [or 4.50 or 1.7]
        
            export AWKPATH=$LIBDIR; awk -f amu-export-kvms-$SRC.awk -v EXPORT_DIR=$EXPORT_DIR -v TGT=$TGT -v KEK=$KEK $EMIGRATE_DIR/$ORG-kvms.out
        elif [ "$SRC" = "hybrid" ]; then
            # hybrid
            check_options "DEK"

            # DEK=$(amu kek export --src $SRC --org $ORG --env $ENV)
            export AWKPATH=$LIBDIR; awk -f amu-export-kvms-$SRC.awk -v EXPORT_DIR=$EXPORT_DIR/$SRC -v TGT=$TGT -v DEK=$DEK $EMIGRATE_DIR/$ORG-kvms.out
        else 
            echo "ERROR: kvms emigrate: unknown src: $SRC"
        fi

    fi

elif [ "$OBJECT" = "keystores" ]; then


# amu keystore emigrate --emigrate-dir --config-dir
    echo "TODO: [ ] WIP"


elif [ "$OBJECT" = "cassandra" ]; then
    
    check_options "ORG SRC BACKUP_DIR"

    if [ "$ACTION" = "cqlsh" ]; then
    
	    run_cqlsh

    elif [ "$ACTION" = "backup" ]; then
        if [ "$SRC" = "opdk" ]; then

            echo "TODO: [ ] "
        elif [ "$SRC" = "hybrid" ]; then

            # 
            for kt in $(exec_cqlsh "copy system_schema.tables( keyspace_name, table_name ) to stdout;"); do
                # keyspace="kvm_${ORG//-/_}_hybrid"
                keyspace=$(echo $kt | awk -F, '{print $1}')
                table=$(echo $kt | awk -F, '{print $2}')

                if [ "$keyspace" = "system_distributed" ] \
                || [ "$keyspace" = "system" ] \
                || [ "$keyspace" = "system_traces" ]; then
                    echo "SKIPPING: $keyspace    $table"
                else

                    echo "PROCESSING: $keyspace    $table"

                    CQL="copy $keyspace.$table to '/tmp/$keyspace-$table.csv' with header = true;"
                    exec_cqlsh "$CQL"

                    kubectl cp apigee/cqlsh:/tmp/$keyspace-$table.csv $BACKUP_DIR/$keyspace-$table.csv
                fi
            done

        fi
    else
        echo "ERROR: Unknown action: $ACTION"        
    fi

else 
    echo "ERROR: Unknown object type: $OBJECT"

fi
